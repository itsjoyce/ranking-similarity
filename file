import java.util.*;

public class Similarity {
	public static <T> double similarity(ArrayList<T> list1, ArrayList<T> list2){
		int count = 0;
		int compare = 0;
		int size = list1.size();
		int total = (size - 1) * size / 2;
		double result = 0;

		
		HashMap<T, Integer> map = new HashMap< T, Integer>();
		
		for (int i = 0; i < size; i++){
			map.put(list1.get(i), i);        //start from 0, most preferred
		}
		
		int[] list2_int = new int[size];
		for (int m = 0; m < size; m++){
			T ele = list2.get(m);
			int val = map.get(ele);
			list2_int[m] = val;
		}
		
		count = mergeSort(list2_int, list2_int.length);
		
		//System.out.println("count "+count);
		result = ((double)total - count)/ (double)total;
		//System.out.println("count "+count);
		//System.out.println("result "+result);
		return result;
	}
	
	
	
	
	public static void main(String[] args) {
		System.out.println("-------------------");
		ArrayList<String> list1 = new ArrayList<>(List.of("A"));  //, "D", "B", "G", "C", "F", "E"
		ArrayList<String> list2 = new ArrayList<>(List.of("A"));  //, "A", "D", "G", "E", "C", "F"
		System.out.println(similarity(list1, list2));
		System.out.println("-------------------");
		ArrayList<String> list3 = new ArrayList<>(List.of("A", "D", "B", "G", "C", "F", "E"));
		ArrayList<String> list4 = new ArrayList<>(List.of("B", "A", "D", "G", "E", "C", "F"));
		System.out.println(similarity(list3, list4));
		System.out.println("-------------------");
		ArrayList<Integer> list5 = new ArrayList<>(List.of(0, 2, 4, 6, 8, 1, 3, 5, 7));
		ArrayList<Integer> list6 = new ArrayList<>(List.of(1, 3, 5, 7, 0, 2, 4, 6, 8));
		System.out.println(similarity(list5, list6)); // should be 0.444444
		

	}
		
		
	// count number of out of order pairs
	public static int mergeSort(int arr[], int size) { 
		int temp[] = new int[size]; 
		return mergeSortHelper(arr, temp, 0, size - 1); 
	} 

	// do merge sort and count
	public static int mergeSortHelper(int arr[], int temp[], int left, int right) { 
		int mid, counter = 0; 
		if (right > left) { 
			// calculating the middle element
			mid = (right + left) / 2; 

			// calculating inversion count for left array
			counter = mergeSortHelper(arr, temp, left, mid); 
			//calculating inversion count for right array
			counter += mergeSortHelper(arr, temp, mid + 1, right); 

			// merging the two arrays
			counter += merge(arr, temp, left, mid + 1, right); 
		} 
		return counter; 
	} 

    // merge the two sorted arrays
	public static int merge(int arr[], int temp[], int left, int mid, int right) { 
		int i, j, k; 
		int counter = 0; 

		i = left; 
		j = mid; 
		k = left; 
		
		while ((i <= mid - 1) && (j <= right)) { 
			// No out of order num 
			if (arr[i] <= arr[j]) { 
				temp[k++] = arr[i++]; 
			} 
			else { 
				// find a out of order num, count number of ind moved
				temp[k++] = arr[j++]; 
				counter += (mid - i); 
			} 
		} 

        // the remaining elements of left array are copied.
		while (i <= mid - 1) 
			temp[k++] = arr[i++]; 

	    // the remaining elements of right array are calculated.
		while (j <= right) 
			temp[k++] = arr[j++]; 

		for (i = left; i <= right; i++) 
			arr[i] = temp[i]; 

		return counter; 
	} 
		
}
